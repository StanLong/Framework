<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        				   http://www.springframework.org/schema/beans/spring-beans.xsd
        				   http://www.springframework.org/schema/context 
        				   http://www.springframework.org/schema/context/spring-context.xsd
        				   http://www.springframework.org/schema/aop
        				   http://www.springframework.org/schema/aop/spring-aop.xsd">
	        				   
	<!-- 创建目标类 -->
	<bean id="userServiceId" class="com.stanlong.r_xml_aspectj.UserServiceImpl"></bean>
	
	<!-- 创建切面类 -->
	<bean id="myAspectId" class="com.stanlong.r_xml_aspectj.MyAspect"></bean>
	
	<!-- AOP编程
		<aop:aspect> 将切面类声明成了切面，从而获得通知
			ref 切面类的引用
		<<aop:pointcut> 声明切入点表达示，所有的通知都可以使用
			execution 切入点表达示
			id：名称(貌似是任意起的)，用来其他通知引用
	 -->
	<aop:config>
		<aop:aspect ref="myAspectId">
			<aop:pointcut expression="execution(* com.stanlong.r_xml_aspectj.UserServiceImpl.*(..))" id="myPointCut"/>
			<!-- 前置通知
				method : 通知及方法名
				pointcut: 切入点表达示，此表达示只能在当前的通知使用
				pointcut-ref : 切入点的引用，可以与其他通知共享切入点
				通知方法的格式： public void myBefore(JoinPoint joinPoint)
					参数：org.aspectj.lang.JoinPoint 用于描述连接点（目标方法），可以获得当前目标方法的方法名
			<aop:before method="myBefore" pointcut-ref="myPointCut"/>
			-->
			
			<!-- 后置通知 : 目标方法后执行，获得目标方法的返回值
				通知方法格式：public void myAfterReturning(JoinPoint joinPoint, Object ret)
					参数1： 连接点描述
					参数2：类型Object, 参数名由 returning="ret" 配置的
			<aop:after-returning method="myAfterReturning" pointcut-ref="myPointCut" returning="ret"/>
			-->
			
			<!-- 环绕通知 
				通知方法格式：public Object myAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable
				返回值类型： Object
				方法名：任意
				参数：org.aspectj.lang.ProceedingJoinPoint
				抛出异常
				执行目标方法 Object obj = proceedingJoinPoint.proceed();
			<aop:around method="myAround" pointcut-ref="myPointCut"/>
			-->
			
			<!-- 抛出异常 
				通知方法格式：public void myAfterThrowing(JoinPoint joinPoint, Throwable e)
					参数1：描述连接点对象
					参数2：获得异常信息， 类型Throwable, 参数名由 throwing="e" 配置
			<aop:after-throwing method="myAfterThrowing" pointcut-ref="myPointCut" throwing="e"/>
			-->
			<!-- 最终通知 -->
			<aop:after method="myAfter" pointcut-ref="myPointCut"/>
		</aop:aspect>
	</aop:config>
</beans>