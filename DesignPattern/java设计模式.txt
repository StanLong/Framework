设计模式常用的七大原则：
1、单一职责原则
2、接口隔离原则
3、依赖倒转原则
4、里氏替换原则
5、开闭原则ocp
6、迪米特法则
7、合成复用原则

设计模式的目的：
1、代码重用性
2、可读性
3、可扩展性
4、可靠性
5、使程序呈现高内聚，低耦合的特型

单一职责原则：
对类来说，即一个类应该只负责一个职责。如果A类负责两个不同的职责：职责1，职责2。当职责1需求变更而改变时，可能造成职责2执行错误，所以需要A类的粒度分解为A1，A2

单一职责原则注意事项和细节
1、降低类的复杂度，一个类只负责一项职责
2、提高类的可读性，可维护性
3、降低变更引起的风险
4、通常情况下我们应该遵守单一职责原则，只有逻辑足够简单才可以在代码级违反单一职责原则：只有类中的方法数量足够少，才可以在方法级别保持单一职责原则


接口隔离原则：
1、客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上	


依赖倒转原则：
1、高层模块不应该依赖低层模块， 二者都应该依赖其抽象
2、抽象不应该依赖细节，细节应该依赖抽象
3、依赖倒转原则的中心思想是面向接口编程
4、依赖倒转原则是基于这样的理念，相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在Java中，抽象指的是接口或抽象类。细节就是具体的实现类。
5、使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。


依赖倒转原则的注意事项和细节
1、低层模块尽量都要有抽象类或接口，或者两者都有，程序稳定性更好
2、变量的声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化
3、继承时遵循里氏替换原则


里氏替换原则
1、所有引用基类的地方必须能透明的使用其子类对象
2、在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法

如果不满足里氏替换原则：
通用的做法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系替代


开闭原则：
新增功能时对原代码改动最小


迪米特法则：
1、一个对象应该对其他对象保持最少的了解
2、类与类关系越密切，耦合度越大
3、出现成员变量，方法参数，方法返回值中的类为直接朋友。而出现在局部变量中的类不是直接朋友，也就是说。陌生的类最好不要以局部变量的形式出现在类的内部


合成复用原则:
尽量使用合成/聚合的方式，而不是使用继承

设计原则的核心思想：
1、找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要的代码混在一起
2、针对接口编程，而不是针对实现编程
3、为了交互对象之间的松耦合设计而努力


设计模式分为三种类型，共23种
1、创建型模式：单例模式，抽象工厂模式，原型模式，建造者模式，工厂模式
2、结构型模式：适配器模式，桥接模式，装饰模式，组合模式，外观模式，享元模式，代理模式
3、行为型模式：模板方法模式、命令模式，访问者模式，迭代器模式，观察者模式，中介者模式，备忘录模式，解释器模式（Interpreter模式），状态模式，策略模式，职责链模式（责任链模式）


单例模式：
所谓单例设计模式，就是采取一定的方法保证在整个软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法（气态方法）
单例模式有八种方式：
1、饿汉式（静态常量）
2、饿汉式（静态代码块）
3、懒汉式（线程不安全）
4、懒汉式（线程安全，同步方法）
5、懒汉式（线程安全，同步代码块）
6、双重检查
7、静态内部类
8、枚举