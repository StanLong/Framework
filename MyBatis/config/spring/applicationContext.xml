<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.2.xsd 
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
		
	<!-- 加载数据源配置文件 -->
	<context:property-placeholder location="classpath:properties/db.properties"/>
		
	<!-- 配置dhcp数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="10" />
		<property name="maxIdle" value="5" />
	</bean>
	
	
	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 加载mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml"></property>
		
		<!-- 配置数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 原始dao配置，对应包 com.stanlong.d_dao -->
	<bean id="userDao" class="com.stanlong.d_dao.UserDaoImpl">
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
	
	<!-- mapper代理配置，对应包 com.stanlong.e_mapper_proxy 
	MapperFactoryBean 根据Mapper接口生成代理对象
	缺点：只能配置单一mapper
	-->
	<bean id="ordersDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<!-- mapperInterface 指定mapper接口 -->
		<property name="mapperInterface" value="com.stanlong.e_mapper_proxy.OrdersDao"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	
	<!-- 多mapper配置方法
		MapperScannerConfigurer 进行mapper的批量扫描
		需要遵循规范：使用mapper代理方法，将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录中
	 -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		指定扫描的包名
		<property name="basePackage" value="com.stanlong.mapper"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean> -->

</beans>