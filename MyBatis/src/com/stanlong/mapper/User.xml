<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 
注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->
<mapper namespace="User">
	<!-- 在映射文件中配置sql语句 -->
	<!-- id:标识映射文件中的sql， 将sql语句封装到edStatement对象中， 所以将id称为 statement 的id
		parmterType:指定输入参数的类型，这里指定int型
		resultType:指定输出结果映射的java对象类型，select指定resultType表示将单条记录映射成java对象
		#{}表示一个占位符
		#{id} 其中id表示输入的参数，参数名称就是id,如果输入的参数类型是简单类型，#{}中的参数名称可以任意
	 -->
	<select id="findUserById" parameterType="int" resultType="user">
		SELECT * FROM user WHERE id = #{id}
	</select>
	
	<!-- 根据用户名称模糊查询用户信息
		${}:表示拼接sql串， 将接收到的参数内容不加任何修饰拼接在sql中, 会引用sql注入
	 -->
	<select id="findUserByName" parameterType="java.lang.String" resultType="user">
		SELECT * FROM user WHERE username LIKE '%${_parameter}%'
	</select>
	
	<!-- 添加用户
		mybatis 通过 获取对象的属性值
	 -->
	<insert id="insertUser" parameterType="user">
		<!-- 将插入数据的主键返回到user对象中
			SELECT LAST_INSERT_ID(): 得到刚插入记录的主键值，只适用于自增长主键
			keyProperty：将查询到的主键值设置到 parameterType指定的对象的那个属性
			order: SELECT LAST_INSERT_ID() 相对于insert语句的执行顺序
			resultType:指定返回结果的类型
		-->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
		
		<!--
			使用非自增主键
			<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
				SELECT uuid()
			</selectKey>
			插入记录
			INSERT INTO USER (id,username, sex, birthday, address) VALUES(#{id}, #{username},#{sex},#{birthday}, #{address})
		 -->
		
		INSERT INTO USER (username, sex, birthday, address) VALUES(#{username},#{sex},#{birthday}, #{address})
	</insert>
	
	<!-- 根据id删除用户 -->
	<delete id="deleteUserById" parameterType="int">
		DELETE FROM user WHERE id = #{id}
	</delete>
	
	<!-- 根据id更新用户 -->
	<update id="updateUserById" parameterType="user">
		UPDATE user SET username=#{username}, birthday=#{birthday}, sex = #{sex}, address=#{address} 
		WHERE id = #{id}
	</update>
	
</mapper>